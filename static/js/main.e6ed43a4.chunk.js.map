{"version":3,"sources":["components/Settings.js","redux/actions/settingsActions.js","redux/actions/types/settingsTypes.js","components/Notification.js","components/Countdown.js","components/App.js","serviceWorker.js","redux/reducers/index.js","redux/reducers/settingsReducer.js","index.js"],"names":["Settings","state","gap","closingTime","isOpen","componentDidMount","a","window","localStorage","getItem","props","setGap","setState","parseInt","setClosingTime","handleGapChange","event","target","value","handleClosingTimeChange","handleSubmit","preventDefault","setItem","this","className","onClick","onSubmit","saveResponse","type","name","placeholder","onChange","React","Component","connect","settings","dispatch","payload","Notifiaction","useState","ignore","setIgnore","title","setTitle","options","setOptions","fireNotification","setFireNotification","useEffect","console","log","tag","Date","now","body","icon","fireNotificationHandle","notSupported","bind","onPermissionGranted","onPermissionDenied","timeout","Countdown","hours","min","sec","clearInterval","interval","setInterval","date","calculateCountdown","stop","diff","Math","floor","lastBreak","timeLeft","millisec","String","length","countDown","addLeadingZeros","App","fireNotif","lastBreakState","handleServedMyTime","setLastBreak","fetchLastBreak","lastBreakTime","toString","Boolean","location","hostname","match","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6ed43a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setGap, setClosingTime } from \"../redux/actions/settingsActions\";\r\nimport \"../styles/settingStyles.scss\";\r\n\r\nclass Settings extends React.Component {\r\n  state = { gap: \"\", closingTime: \"\", isOpen: false };\r\n\r\n  componentDidMount = async () => {\r\n    if (!window.localStorage.getItem(\"breakGap\")) {\r\n      await this.props.setGap(\"3600000\");\r\n    } else {\r\n      await this.props.setGap(window.localStorage.getItem(\"breakGap\"));\r\n      this.setState({ gap: parseInt(this.props.gap) / 1000 / 60 });\r\n    }\r\n\r\n    if (!window.localStorage.getItem(\"closingTime\")) {\r\n      await this.props.setClosingTime(\"17:00\");\r\n    } else {\r\n      await this.props.setClosingTime(\r\n        window.localStorage.getItem(\"closingTime\")\r\n      );\r\n      this.setState({\r\n        closingTime: this.props.closingTime\r\n      });\r\n    }\r\n  };\r\n\r\n  handleGapChange = event => {\r\n    this.setState({ gap: event.target.value });\r\n  };\r\n\r\n  handleClosingTimeChange = event => {\r\n    this.setState({ closingTime: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.setGap(parseInt(this.state.gap) * 1000 * 60);\r\n    window.localStorage.setItem(\r\n      \"breakGap\",\r\n      parseInt(this.state.gap) * 1000 * 60\r\n    );\r\n    this.props.setClosingTime(this.state.closingTime);\r\n    window.localStorage.setItem(\"closingTime\", this.state.closingTime);\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  saveResponse() {\r\n    if (this.state.isOpen) {\r\n      return (\r\n        <div\r\n          className=\"save-success\"\r\n          onClick={() => this.setState({ isOpen: false })}\r\n        >\r\n          Saved (Click to close!)\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.saveResponse()}\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"gap\"\r\n            placeholder={`saved value: ${this.props.gap}`}\r\n            value={this.state.gap}\r\n            onChange={this.handleGapChange}\r\n          />\r\n          <label className=\"label\">Gap (min)</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            placeholder={`saved value: ${this.props.closingTime}`}\r\n            value={this.state.closingTime}\r\n            onChange={this.handleClosingTimeChange}\r\n          />\r\n          <label className=\"label\">Closing Time</label>\r\n          <input className=\"saveSettings\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    gap: state.settings.gap,\r\n    closingTime: state.settings.closingTime\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setGap, setClosingTime })(Settings);\r\n","import {\r\n  SET_GAP,\r\n  SET_CLOSING_TIME,\r\n  FETCH_LAST_BREAK_TIME,\r\n  SET_LAST_BREAK_TIME\r\n} from \"./types/settingsTypes\";\r\n\r\nexport const setGap = gap => async dispatch => {\r\n  dispatch({ type: SET_GAP, payload: gap });\r\n};\r\n\r\nexport const setClosingTime = closingTime => async dispatch => {\r\n  dispatch({ type: SET_CLOSING_TIME, payload: closingTime });\r\n};\r\n\r\nexport const fetchLastBreak = () => async dispatch => {\r\n  dispatch({\r\n    type: FETCH_LAST_BREAK_TIME,\r\n    payload: window.localStorage.getItem(\"lastBreaktTime\")\r\n  });\r\n};\r\n\r\nexport const setLastBreak = () => async dispatch => {\r\n  window.localStorage.setItem(\"lastBreaktTime\", Date.now().toString());\r\n\r\n  dispatch({ type: SET_LAST_BREAK_TIME, payload: Date.now().toString() });\r\n};\r\n","export const SET_GAP = \"SET_GAP\";\r\nexport const SET_CLOSING_TIME = \"SET_CLOSING_TIME\";\r\nexport const FETCH_LAST_BREAK_TIME = \"FETCH_LAST_BREAK_TIME\";\r\nexport const SET_LAST_BREAK_TIME = \"SET_LAST_BREAK_TIME\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Notification from \"react-web-notification\";\r\n\r\nconst Notifiaction = props => {\r\n  const [ignore, setIgnore] = useState(true);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [options, setOptions] = useState(null);\r\n  const [fireNotification, setFireNotification] = useState(\r\n    props.fireNotification\r\n  );\r\n\r\n  const handlePermissionGranted = () => {\r\n    setIgnore(false);\r\n  };\r\n  const handlePermissionDenied = () => {\r\n    setIgnore(true);\r\n  };\r\n  const handleNotSupported = () => {\r\n    setIgnore(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.fireNotification !== fireNotification) {\r\n      setFireNotification(props.fireNotification);\r\n    }\r\n  }, [props.fireNotification]);\r\n\r\n  const fireNotificationHandle = () => {\r\n    if (fireNotification) {\r\n      console.log(\"fired\");\r\n      const now = Date.now();\r\n\r\n      const title = \"MOLA VAKTİ\";\r\n      const body = \"Çıkıp hava alma zamanın geldi!\";\r\n      const tag = now;\r\n      const icon =\r\n        \"https://www.newlifea2.org/wp-content/uploads/2015/07/Sermon_Breathe.jpg\";\r\n\r\n      const options = {\r\n        tag: tag,\r\n        body: body,\r\n        icon: icon\r\n      };\r\n      setTitle(title);\r\n      setOptions(options);\r\n      setFireNotification(false);\r\n    }\r\n  };\r\n\r\n  fireNotificationHandle();\r\n\r\n  return (\r\n    <Notification\r\n      ignore={ignore && title !== \"\"}\r\n      notSupported={handleNotSupported.bind(this)}\r\n      onPermissionGranted={handlePermissionGranted.bind(this)}\r\n      onPermissionDenied={handlePermissionDenied.bind(this)}\r\n      timeout={5000}\r\n      title={title}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Notifiaction;\r\n","import React from \"react\";\r\nimport Notification from \"./Notification\";\r\nimport \"../styles/Countdown.scss\";\r\n\r\nclass Countdown extends React.Component {\r\n  state = {\r\n    hours: null,\r\n    min: null,\r\n    sec: null,\r\n    fireNotification: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    // update every second\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(() => {\r\n      const date = this.calculateCountdown();\r\n      date ? this.setState(date) : this.stop();\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  calculateCountdown() {\r\n    this.setState({ fireNotification: false });\r\n    let diff = Math.floor(\r\n      (parseInt(this.props.lastBreak) + parseInt(this.props.gap) - Date.now()) /\r\n        1000\r\n    );\r\n\r\n    // clear countdown when date is reached\r\n    if (diff <= 0) return false;\r\n\r\n    const timeLeft = {\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0,\r\n      millisec: 0\r\n    };\r\n\r\n    // calculate time difference between now and expected date\r\n    if (diff >= 3600) {\r\n      // 60 * 60\r\n      timeLeft.hours = Math.floor(diff / 3600);\r\n      diff -= timeLeft.hours * 3600;\r\n    }\r\n    if (diff >= 60) {\r\n      timeLeft.min = Math.floor(diff / 60);\r\n      diff -= timeLeft.min * 60;\r\n    }\r\n    timeLeft.sec = diff;\r\n\r\n    return timeLeft;\r\n  }\r\n\r\n  stop() {\r\n    this.setState({ fireNotification: true });\r\n    // clearInterval(this.interval);\r\n  }\r\n\r\n  addLeadingZeros(value) {\r\n    value = String(value);\r\n    while (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  render() {\r\n    const countDown = this.state;\r\n\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.hours ? this.addLeadingZeros(countDown.hours) : \"00\"}\r\n            </strong>\r\n            <span>Hours</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.min ? this.addLeadingZeros(countDown.min) : \"00\"}\r\n            </strong>\r\n            <span>Min</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.sec ? this.addLeadingZeros(countDown.sec) : \"00\"}\r\n            </strong>\r\n            <span>Sec</span>\r\n          </span>\r\n        </span>\r\n        <Notification fireNotification={this.state.fireNotification} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Settings from \"./Settings\";\nimport Countdown from \"./Countdown\";\n\nimport { fetchLastBreak, setLastBreak } from \"../redux/actions/settingsActions\";\nimport \"../styles/App.scss\";\n\nclass App extends React.Component {\n  state = {\n    ignore: true,\n    title: \"\",\n    fireNotif: false,\n    lastBreakState: null\n  };\n\n  componentDidMount() {\n    this.props.fetchLastBreak();\n  }\n  handleServedMyTime = async () => {\n    await this.props.setLastBreak();\n    await this.props.fetchLastBreak();\n  };\n\n  render() {\n    return (\n      <div className=\"center\">\n        <Settings />\n        <h1 className=\"title\">Countdown to Break:</h1>\n        <Countdown\n          gap={parseInt(this.props.gap)}\n          lastBreak={parseInt(this.props.lastBreakTime)}\n        />\n        <button\n          className=\"servedMyTime\"\n          onClick={() => this.handleServedMyTime()}\n        >\n          Molaya Çıktım\n        </button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    gap: state.settings.gap,\n    lastBreakTime: state.settings.lastBreakTime\n  };\n};\n\nexport default connect(mapStateToProps, { fetchLastBreak, setLastBreak })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport settingsReducer from \"./settingsReducer\";\r\n\r\nexport default combineReducers({\r\n  settings: settingsReducer\r\n});\r\n","import {\r\n  SET_GAP,\r\n  SET_CLOSING_TIME,\r\n  FETCH_LAST_BREAK_TIME,\r\n  SET_LAST_BREAK_TIME\r\n} from \"../actions/types/settingsTypes\";\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case SET_GAP:\r\n      return { ...state, gap: action.payload };\r\n    case SET_CLOSING_TIME:\r\n      return {\r\n        ...state,\r\n        closingTime: action.payload\r\n      };\r\n    case FETCH_LAST_BREAK_TIME:\r\n      return {\r\n        ...state,\r\n        lastBreakTime: action.payload\r\n      };\r\n    case SET_LAST_BREAK_TIME:\r\n      return {\r\n        ...state,\r\n        lastBreakTime: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducers from \"./redux/reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}