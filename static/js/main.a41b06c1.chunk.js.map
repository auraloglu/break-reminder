{"version":3,"sources":["redux/actions/settingsActions.js","redux/actions/types/settingsTypes.js","components/Settings.js","components/Notification.js","components/Countdown.js","components/CountdownToLeave.js","components/App.js","serviceWorker.js","redux/reducers/index.js","redux/reducers/settingsReducer.js","index.js"],"names":["setLastBreak","dispatch","a","window","localStorage","setItem","Date","now","toString","type","payload","Settings","state","gap","closingTime","isOpen","isSettings","breakNotifHeader","breakNotifText","endNotifHeader","endNotifText","componentDidMount","getItem","props","setGap","setState","parseInt","setClosingTime","setBreakNotificationHeader","setBreakNotificationText","setEndNotificationHeader","setEndNotificationText","handleGapChange","event","target","value","handleClosingTimeChange","handleBreakNotifHeaderChange","handleBreakNotifTextChange","handleEndNotifHeaderChange","handleEndNotifTextChange","handleSubmit","preventDefault","this","className","onClick","renderSettings","onSubmit","saveResponse","name","placeholder","onChange","React","Component","connect","settings","header","text","Notifiaction","useState","ignore","setIgnore","title","setTitle","options","setOptions","fireNotification","setFireNotification","useEffect","tag","body","icon","sound","fireNotificationHandle","notSupported","bind","onPermissionGranted","onPermissionDenied","timeout","Countdown","hours","min","sec","clearInterval","interval","setInterval","date","calculateCountdown","stop","diff","Math","floor","lastBreak","timeLeft","millisec","String","length","countDown","addLeadingZeros","breakNotificationHeader","breakNotificationText","CountdownToLeave","hr","split","setHours","setMinutes","getTime","endNotificationHeader","endNotificationText","App","fireNotif","lastBreakState","handleServedMyTime","fetchLastBreak","lastBreakTime","Boolean","location","hostname","match","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a41b06c1.chunk.js","sourcesContent":["import {\r\n  SET_GAP,\r\n  SET_CLOSING_TIME,\r\n  FETCH_LAST_BREAK_TIME,\r\n  SET_LAST_BREAK_TIME,\r\n  SET_BREAK_NOTIFICATION_HEADER,\r\n  SET_BREAK_NOTIFICATION_TEXT,\r\n  SET_END_NOTIFICATION_HEADER,\r\n  SET_END_NOTIFICATION_TEXT\r\n} from \"./types/settingsTypes\";\r\n\r\nexport const setGap = gap => async dispatch => {\r\n  dispatch({ type: SET_GAP, payload: gap });\r\n};\r\n\r\nexport const setClosingTime = closingTime => async dispatch => {\r\n  window.localStorage.setItem(\"closingTime\", closingTime);\r\n  dispatch({ type: SET_CLOSING_TIME, payload: closingTime });\r\n};\r\n\r\nexport const fetchLastBreak = () => async dispatch => {\r\n  dispatch({\r\n    type: FETCH_LAST_BREAK_TIME,\r\n    payload: window.localStorage.getItem(\"lastBreaktTime\")\r\n  });\r\n};\r\n\r\nexport const setLastBreak = () => async dispatch => {\r\n  window.localStorage.setItem(\"lastBreaktTime\", Date.now().toString());\r\n\r\n  dispatch({ type: SET_LAST_BREAK_TIME, payload: Date.now().toString() });\r\n};\r\n\r\nexport const setBreakNotificationHeader = header => async dispatch => {\r\n  window.localStorage.setItem(\"breakNotificationHeader\", header);\r\n\r\n  dispatch({ type: SET_BREAK_NOTIFICATION_HEADER, payload: header });\r\n};\r\nexport const setBreakNotificationText = text => async dispatch => {\r\n  window.localStorage.setItem(\"breakNotificationText\", text);\r\n\r\n  dispatch({ type: SET_BREAK_NOTIFICATION_TEXT, payload: text });\r\n};\r\nexport const setEndNotificationHeader = header => async dispatch => {\r\n  window.localStorage.setItem(\"endNotificationHeader\", header);\r\n\r\n  dispatch({ type: SET_END_NOTIFICATION_HEADER, payload: header });\r\n};\r\nexport const setEndNotificationText = text => async dispatch => {\r\n  window.localStorage.setItem(\"endNotificationText\", text);\r\n\r\n  dispatch({ type: SET_END_NOTIFICATION_TEXT, payload: text });\r\n};\r\n","export const SET_GAP = \"SET_GAP\";\r\nexport const SET_CLOSING_TIME = \"SET_CLOSING_TIME\";\r\nexport const FETCH_LAST_BREAK_TIME = \"FETCH_LAST_BREAK_TIME\";\r\nexport const SET_LAST_BREAK_TIME = \"SET_LAST_BREAK_TIME\";\r\nexport const SET_BREAK_NOTIFICATION_HEADER = \"SET_BREAK_NOTIFICATION_HEADER\";\r\nexport const SET_BREAK_NOTIFICATION_TEXT = \"SET_BREAK_NOTIFICATION_TEXT\";\r\nexport const SET_END_NOTIFICATION_HEADER = \"SET_END_NOTIFICATION_HEADER\";\r\nexport const SET_END_NOTIFICATION_TEXT = \"SET_END_NOTIFICATION_TEXT\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setGap,\r\n  setClosingTime,\r\n  setLastBreak,\r\n  setBreakNotificationHeader,\r\n  setBreakNotificationText,\r\n  setEndNotificationHeader,\r\n  setEndNotificationText\r\n} from \"../redux/actions/settingsActions\";\r\nimport { IoMdSettings } from \"react-icons/io\";\r\nimport \"../styles/Settings.scss\";\r\n\r\nclass Settings extends React.Component {\r\n  state = {\r\n    gap: \"\",\r\n    closingTime: \"\",\r\n    isOpen: false,\r\n    isSettings: true,\r\n    breakNotifHeader: \"\",\r\n    breakNotifText: \"\",\r\n    endNotifHeader: \"\",\r\n    endNotifText: \"\"\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    if (!window.localStorage.getItem(\"breakGap\")) {\r\n      await this.props.setGap(\"3600000\");\r\n    } else {\r\n      await this.props.setGap(window.localStorage.getItem(\"breakGap\"));\r\n      this.setState({ gap: parseInt(this.props.gap) / 1000 / 60 });\r\n    }\r\n\r\n    if (!window.localStorage.getItem(\"lastBreaktTime\")) {\r\n      await this.props.setLastBreak();\r\n    }\r\n\r\n    if (!window.localStorage.getItem(\"closingTime\")) {\r\n      await this.props.setClosingTime(\"17:00\");\r\n    } else {\r\n      await this.props.setClosingTime(\r\n        window.localStorage.getItem(\"closingTime\")\r\n      );\r\n      this.setState({\r\n        closingTime: this.props.closingTime\r\n      });\r\n    }\r\n\r\n    if (!window.localStorage.getItem(\"breakNotificationHeader\")) {\r\n      this.setState({ breakNotifHeader: \"It's Break Time!\" });\r\n    } else {\r\n      await this.props.setBreakNotificationHeader(\r\n        window.localStorage.getItem(\"breakNotificationHeader\")\r\n      );\r\n      this.setState({\r\n        breakNotifHeader: window.localStorage.getItem(\"breakNotificationHeader\")\r\n      });\r\n    }\r\n\r\n    if (!window.localStorage.getItem(\"breakNotificationText\")) {\r\n      this.setState({ breakNotifText: \"Lets have a break and get some air!\" });\r\n    } else {\r\n      await this.props.setBreakNotificationText(\r\n        window.localStorage.getItem(\"breakNotificationText\")\r\n      );\r\n      this.setState({\r\n        breakNotifText: window.localStorage.getItem(\"breakNotificationText\")\r\n      });\r\n    }\r\n    if (!window.localStorage.getItem(\"endNotificationHeader\")) {\r\n      this.setState({ endNotifHeader: \"IT'S GO TIME!\" });\r\n    } else {\r\n      await this.props.setEndNotificationHeader(\r\n        window.localStorage.getItem(\"endNotificationHeader\")\r\n      );\r\n      this.setState({\r\n        endNotifHeader: window.localStorage.getItem(\"endNotificationHeader\")\r\n      });\r\n    }\r\n    if (!window.localStorage.getItem(\"endNotificationText\")) {\r\n      this.setState({ endNotifText: \"Go home and get some rest!\" });\r\n    } else {\r\n      await this.props.setEndNotificationText(\r\n        window.localStorage.getItem(\"endNotificationText\")\r\n      );\r\n      this.setState({\r\n        endNotifText: window.localStorage.getItem(\"endNotificationText\")\r\n      });\r\n    }\r\n  };\r\n\r\n  handleGapChange = event => {\r\n    this.setState({ gap: event.target.value });\r\n  };\r\n\r\n  handleClosingTimeChange = event => {\r\n    this.setState({ closingTime: event.target.value });\r\n  };\r\n\r\n  handleBreakNotifHeaderChange = event => {\r\n    this.setState({ breakNotifHeader: event.target.value });\r\n  };\r\n\r\n  handleBreakNotifTextChange = event => {\r\n    this.setState({ breakNotifText: event.target.value });\r\n  };\r\n\r\n  handleEndNotifHeaderChange = event => {\r\n    this.setState({ endNotifHeader: event.target.value });\r\n  };\r\n\r\n  handleEndNotifTextChange = event => {\r\n    this.setState({ endNotifText: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.setGap(parseInt(this.state.gap) * 1000 * 60);\r\n    window.localStorage.setItem(\r\n      \"breakGap\",\r\n      parseInt(this.state.gap) * 1000 * 60\r\n    );\r\n    this.props.setClosingTime(this.state.closingTime);\r\n    window.localStorage.setItem(\"closingTime\", this.state.closingTime);\r\n\r\n    this.props.setBreakNotificationHeader(this.state.breakNotifHeader);\r\n    this.props.setBreakNotificationText(this.state.breakNotifText);\r\n    this.props.setEndNotificationHeader(this.state.endNotifHeader);\r\n    this.props.setEndNotificationText(this.state.endNotifText);\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  saveResponse() {\r\n    if (this.state.isOpen) {\r\n      return (\r\n        <div\r\n          className=\"save-success\"\r\n          onClick={() => this.setState({ isOpen: false })}\r\n        >\r\n          Saved (Click to close!)\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderSettings() {\r\n    return (\r\n      <div\r\n        className=\"settings\"\r\n        onClick={() => this.setState({ isSettings: !this.state.isSettings })}\r\n      >\r\n        <IoMdSettings className=\"settings-icon\" />\r\n        <span className=\"settings-text\">Settings</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isSettings) {\r\n      return (\r\n        <div>\r\n          {this.renderSettings()}\r\n          <form onSubmit={this.handleSubmit}>\r\n            {this.saveResponse()}\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              name=\"gap\"\r\n              placeholder={`saved value: ${this.props.gap / 1000 / 60}`}\r\n              value={this.state.gap}\r\n              onChange={this.handleGapChange}\r\n            />\r\n            <label className=\"label\">Gap (min)</label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder={`saved value: ${this.props.closingTime}`}\r\n              value={this.state.closingTime}\r\n              onChange={this.handleClosingTimeChange}\r\n            />\r\n            <label className=\"label\">Closing Time</label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder={`saved value: ${this.state.breakNotifHeader}`}\r\n              value={this.state.breakNotifHeader}\r\n              onChange={this.handleBreakNotifHeaderChange}\r\n            />\r\n            <label className=\"label\">Break Notification Hader</label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder={`saved value: ${this.state.breakNotifText}`}\r\n              value={this.state.breakNotifText}\r\n              onChange={this.handleBreakNotifTextChange}\r\n            />\r\n            <label className=\"label\">Break Notification Text</label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder={`saved value: ${this.state.endNotifHeader}`}\r\n              value={this.state.endNotifHeader}\r\n              onChange={this.handleEndNotifHeaderChange}\r\n            />\r\n            <label className=\"label\">End Notification Header</label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder={`saved value: ${this.state.endNotifText}`}\r\n              value={this.state.endNotifText}\r\n              onChange={this.handleEndNotifTextChange}\r\n            />\r\n            <label className=\"label\">End Notification Text</label>\r\n            <input className=\"saveSettings\" type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n    return <>{this.renderSettings()}</>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    gap: state.settings.gap,\r\n    closingTime: state.settings.closingTime\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setGap,\r\n  setClosingTime,\r\n  setLastBreak,\r\n  setBreakNotificationHeader,\r\n  setBreakNotificationText,\r\n  setEndNotificationHeader,\r\n  setEndNotificationText\r\n})(Settings);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Notification from \"react-web-notification\";\r\n\r\nconst Notifiaction = props => {\r\n  const [ignore, setIgnore] = useState(true);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [options, setOptions] = useState(null);\r\n  const [fireNotification, setFireNotification] = useState(\r\n    props.fireNotification\r\n  );\r\n\r\n  const handlePermissionGranted = () => {\r\n    setIgnore(false);\r\n  };\r\n  const handlePermissionDenied = () => {\r\n    setIgnore(true);\r\n  };\r\n  const handleNotSupported = () => {\r\n    setIgnore(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.fireNotification !== fireNotification) {\r\n      setFireNotification(props.fireNotification);\r\n    }\r\n  }, [props.fireNotification]);\r\n\r\n  const fireNotificationHandle = () => {\r\n    if (fireNotification) {\r\n      const now = Date.now();\r\n\r\n      const title = props.header;\r\n      const body = props.text;\r\n      const tag = now;\r\n      const icon =\r\n        \"https://www.newlifea2.org/wp-content/uploads/2015/07/Sermon_Breathe.jpg\";\r\n\r\n      const options = {\r\n        tag: tag,\r\n        body: body,\r\n        icon: icon,\r\n        sound: \"../sound/closingTime.mp3\"\r\n      };\r\n      setTitle(title);\r\n      setOptions(options);\r\n      setFireNotification(false);\r\n    }\r\n  };\r\n\r\n  fireNotificationHandle();\r\n  return (\r\n    <>\r\n      <Notification\r\n        ignore={ignore && title !== \"\"}\r\n        notSupported={handleNotSupported.bind(this)}\r\n        onPermissionGranted={handlePermissionGranted.bind(this)}\r\n        onPermissionDenied={handlePermissionDenied.bind(this)}\r\n        timeout={5000}\r\n        title={title}\r\n        options={options}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifiaction;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Notification from \"./Notification\";\r\n\r\nimport \"../styles/Countdown.scss\";\r\n\r\nclass Countdown extends React.Component {\r\n  state = {\r\n    hours: null,\r\n    min: null,\r\n    sec: null,\r\n    fireNotification: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    // update every second\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(() => {\r\n      const date = this.calculateCountdown();\r\n      date ? this.setState(date) : this.stop();\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  calculateCountdown() {\r\n    let diff = Math.floor(\r\n      (parseInt(this.props.lastBreak) + parseInt(this.props.gap) - Date.now()) /\r\n        1000\r\n    );\r\n\r\n    // clear countdown when date is reached\r\n    if (diff <= 0) return false;\r\n\r\n    const timeLeft = {\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0,\r\n      millisec: 0\r\n    };\r\n\r\n    // calculate time difference between now and expected date\r\n    if (diff >= 3600) {\r\n      // 60 * 60\r\n      timeLeft.hours = Math.floor(diff / 3600);\r\n      diff -= timeLeft.hours * 3600;\r\n    }\r\n    if (diff >= 60) {\r\n      timeLeft.min = Math.floor(diff / 60);\r\n      diff -= timeLeft.min * 60;\r\n    }\r\n    timeLeft.sec = diff;\r\n\r\n    return timeLeft;\r\n  }\r\n\r\n  stop() {\r\n    this.setState({ fireNotification: true });\r\n    // clearInterval(this.interval);\r\n  }\r\n\r\n  addLeadingZeros(value) {\r\n    value = String(value);\r\n    while (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  render() {\r\n    const countDown = this.state;\r\n\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.hours ? this.addLeadingZeros(countDown.hours) : \"00\"}\r\n            </strong>\r\n            <span>Hours</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.min ? this.addLeadingZeros(countDown.min) : \"00\"}\r\n            </strong>\r\n            <span>Min</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.sec ? this.addLeadingZeros(countDown.sec) : \"00\"}\r\n            </strong>\r\n            <span>Sec</span>\r\n          </span>\r\n        </span>\r\n        <Notification\r\n          fireNotification={this.state.fireNotification}\r\n          header={this.props.breakNotifHeader}\r\n          text={this.props.breakNotifText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    breakNotifHeader: state.settings.breakNotificationHeader,\r\n    breakNotifText: state.settings.breakNotificationText\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Countdown);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Notification from \"./Notification\";\r\n\r\nimport \"../styles/Countdown.scss\";\r\n\r\nclass CountdownToLeave extends React.Component {\r\n  state = {\r\n    hours: null,\r\n    min: null,\r\n    sec: null,\r\n    fireNotification: false,\r\n    now: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ now: new Date() });\r\n    // update every second\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(() => {\r\n      const date = this.calculateCountdown();\r\n      date ? this.setState(date) : this.stop();\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  calculateCountdown() {\r\n    this.setState({ fireNotification: false });\r\n    var hr = this.props.closingTime.split(\":\");\r\n\r\n    var now = this.state.now;\r\n    now.setHours(parseInt(hr[0]));\r\n    now.setMinutes(parseInt(hr[1]));\r\n    let diff = Math.floor((now.getTime() - Date.now()) / 1000);\r\n\r\n    // clear countdown when date is reached\r\n    if (diff <= 0) return false;\r\n\r\n    const timeLeft = {\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0,\r\n      millisec: 0\r\n    };\r\n\r\n    // calculate time difference between now and expected date\r\n    if (diff >= 3600) {\r\n      // 60 * 60\r\n      timeLeft.hours = Math.floor(diff / 3600);\r\n      diff -= timeLeft.hours * 3600;\r\n    }\r\n    if (diff >= 60) {\r\n      timeLeft.min = Math.floor(diff / 60);\r\n      diff -= timeLeft.min * 60;\r\n    }\r\n    timeLeft.sec = diff;\r\n\r\n    return timeLeft;\r\n  }\r\n\r\n  stop() {\r\n    this.setState({ fireNotification: true });\r\n\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  addLeadingZeros(value) {\r\n    value = String(value);\r\n    while (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  render() {\r\n    const countDown = this.state;\r\n\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.hours ? this.addLeadingZeros(countDown.hours) : \"00\"}\r\n            </strong>\r\n            <span>Hours</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.min ? this.addLeadingZeros(countDown.min) : \"00\"}\r\n            </strong>\r\n            <span>Min</span>\r\n          </span>\r\n        </span>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>\r\n              {countDown.sec ? this.addLeadingZeros(countDown.sec) : \"00\"}\r\n            </strong>\r\n            <span>Sec</span>\r\n          </span>\r\n        </span>\r\n        <Notification\r\n          fireNotification={this.state.fireNotification}\r\n          header={this.props.endNotifHeader}\r\n          text={this.props.endNotifText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    endNotifHeader: state.settings.endNotificationHeader,\r\n    endNotifText: state.settings.endNotificationText\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CountdownToLeave);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Settings from \"./Settings\";\r\nimport Countdown from \"./Countdown\";\r\nimport CountdownToLeave from \"./CountdownToLeave\";\r\n\r\nimport { fetchLastBreak, setLastBreak } from \"../redux/actions/settingsActions\";\r\nimport \"../styles/App.scss\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    ignore: true,\r\n    title: \"\",\r\n    fireNotif: false,\r\n    lastBreakState: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchLastBreak();\r\n  }\r\n  handleServedMyTime = async () => {\r\n    await this.props.setLastBreak();\r\n    await this.props.fetchLastBreak();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"center\">\r\n        <Settings />\r\n        <h1 className=\"title\">Countdown to Break:</h1>\r\n        <Countdown\r\n          gap={parseInt(this.props.gap)}\r\n          lastBreak={parseInt(this.props.lastBreakTime)}\r\n        />\r\n        <button\r\n          className=\"servedMyTime\"\r\n          onClick={() => this.handleServedMyTime()}\r\n        >\r\n          Served My Time\r\n        </button>\r\n        <h1 className=\"title\">Countdown to End of Suffering:</h1>\r\n        <CountdownToLeave closingTime={this.props.closingTime} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    gap: state.settings.gap,\r\n    lastBreakTime: state.settings.lastBreakTime,\r\n    closingTime: state.settings.closingTime\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchLastBreak, setLastBreak })(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport settingsReducer from \"./settingsReducer\";\r\n\r\nexport default combineReducers({\r\n  settings: settingsReducer\r\n});\r\n","import {\r\n  SET_GAP,\r\n  SET_CLOSING_TIME,\r\n  FETCH_LAST_BREAK_TIME,\r\n  SET_LAST_BREAK_TIME,\r\n  SET_BREAK_NOTIFICATION_HEADER,\r\n  SET_BREAK_NOTIFICATION_TEXT,\r\n  SET_END_NOTIFICATION_HEADER,\r\n  SET_END_NOTIFICATION_TEXT\r\n} from \"../actions/types/settingsTypes\";\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case SET_GAP:\r\n      return { ...state, gap: action.payload };\r\n    case SET_CLOSING_TIME:\r\n      return {\r\n        ...state,\r\n        closingTime: action.payload\r\n      };\r\n    case FETCH_LAST_BREAK_TIME:\r\n      return {\r\n        ...state,\r\n        lastBreakTime: action.payload\r\n      };\r\n    case SET_LAST_BREAK_TIME:\r\n      return {\r\n        ...state,\r\n        lastBreakTime: action.payload\r\n      };\r\n    case SET_BREAK_NOTIFICATION_HEADER:\r\n      return {\r\n        ...state,\r\n        breakNotificationHeader: action.payload\r\n      };\r\n    case SET_BREAK_NOTIFICATION_TEXT:\r\n      return {\r\n        ...state,\r\n        breakNotificationText: action.payload\r\n      };\r\n    case SET_END_NOTIFICATION_HEADER:\r\n      return {\r\n        ...state,\r\n        endNotificationHeader: action.payload\r\n      };\r\n    case SET_END_NOTIFICATION_TEXT:\r\n      return {\r\n        ...state,\r\n        endNotificationText: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducers from \"./redux/reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}